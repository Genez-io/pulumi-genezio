# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import domain as _domain

__all__ = ['AuthenticationArgs', 'Authentication']

@pulumi.input_type
class AuthenticationArgs:
    def __init__(__self__, *,
                 database_url: pulumi.Input[str],
                 project: pulumi.Input['_domain.ProjectArgs'],
                 database_type: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input['_domain.AuthenticationProvidersArgs']] = None):
        """
        The set of arguments for constructing a Authentication resource.
        :param pulumi.Input[str] database_url: The URL of the database to be used for authentication.
        :param pulumi.Input['_domain.ProjectArgs'] project: The project to which the authentication will be added.
        :param pulumi.Input[str] database_type: The type of database to be used for authentication.
               
               	Supported database types are:
               	- postgresql
               	- mongodb
        :param pulumi.Input['_domain.AuthenticationProvidersArgs'] provider: The authentication providers to be enabled for the project.
               
               	You can enable the following providers:
               	- email
               	- web3
               	- google
        """
        pulumi.set(__self__, "database_url", database_url)
        pulumi.set(__self__, "project", project)
        if database_type is None:
            database_type = 'postgresql'
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> pulumi.Input[str]:
        """
        The URL of the database to be used for authentication.
        """
        return pulumi.get(self, "database_url")

    @database_url.setter
    def database_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_url", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input['_domain.ProjectArgs']:
        """
        The project to which the authentication will be added.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input['_domain.ProjectArgs']):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of database to be used for authentication.

        	Supported database types are:
        	- postgresql
        	- mongodb
        """
        return pulumi.get(self, "database_type")

    @database_type.setter
    def database_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_type", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input['_domain.AuthenticationProvidersArgs']]:
        """
        The authentication providers to be enabled for the project.

        	You can enable the following providers:
        	- email
        	- web3
        	- google
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input['_domain.AuthenticationProvidersArgs']]):
        pulumi.set(self, "provider", value)


class Authentication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_type: Optional[pulumi.Input[str]] = None,
                 database_url: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['_domain.ProjectArgs']]] = None,
                 provider: Optional[pulumi.Input[pulumi.InputType['_domain.AuthenticationProvidersArgs']]] = None,
                 __props__=None):
        """
        A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.

        The project resource will deploy an empty project on the Genezio platform.

        It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.

        ## Example Usage

        ### Basic Usage

        ### Environment Variables

        ## Pulumi Output Reference

        Once the project is created, the `projectId` and `projectUrl` are available as outputs.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database_type: The type of database to be used for authentication.
               
               	Supported database types are:
               	- postgresql
               	- mongodb
        :param pulumi.Input[str] database_url: The URL of the database to be used for authentication.
        :param pulumi.Input[pulumi.InputType['_domain.ProjectArgs']] project: The project to which the authentication will be added.
        :param pulumi.Input[pulumi.InputType['_domain.AuthenticationProvidersArgs']] provider: The authentication providers to be enabled for the project.
               
               	You can enable the following providers:
               	- email
               	- web3
               	- google
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthenticationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.

        The project resource will deploy an empty project on the Genezio platform.

        It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.

        ## Example Usage

        ### Basic Usage

        ### Environment Variables

        ## Pulumi Output Reference

        Once the project is created, the `projectId` and `projectUrl` are available as outputs.

        :param str resource_name: The name of the resource.
        :param AuthenticationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthenticationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_type: Optional[pulumi.Input[str]] = None,
                 database_url: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['_domain.ProjectArgs']]] = None,
                 provider: Optional[pulumi.Input[pulumi.InputType['_domain.AuthenticationProvidersArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthenticationArgs.__new__(AuthenticationArgs)

            if database_type is None:
                database_type = 'postgresql'
            __props__.__dict__["database_type"] = database_type
            if database_url is None and not opts.urn:
                raise TypeError("Missing required property 'database_url'")
            __props__.__dict__["database_url"] = database_url
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["provider"] = provider
            __props__.__dict__["region"] = None
            __props__.__dict__["token"] = None
        super(Authentication, __self__).__init__(
            'genezio:index:Authentication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Authentication':
        """
        Get an existing Authentication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AuthenticationArgs.__new__(AuthenticationArgs)

        __props__.__dict__["database_type"] = None
        __props__.__dict__["database_url"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["provider"] = None
        __props__.__dict__["region"] = None
        __props__.__dict__["token"] = None
        return Authentication(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of database to be used for authentication.

        	Supported database types are:
        	- postgresql
        	- mongodb
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> pulumi.Output[str]:
        """
        The URL of the database to be used for authentication.
        """
        return pulumi.get(self, "database_url")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output['_domain.outputs.Project']:
        """
        The project to which the authentication will be added.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Output[Optional['_domain.outputs.AuthenticationProviders']]:
        """
        The authentication providers to be enabled for the project.

        	You can enable the following providers:
        	- email
        	- web3
        	- google
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region in which the authentication is deployed.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        The token for the authentication. This token is used on the client side.
        """
        return pulumi.get(self, "token")

