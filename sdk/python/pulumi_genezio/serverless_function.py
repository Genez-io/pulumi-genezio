# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import domain as _domain

__all__ = ['ServerlessFunctionArgs', 'ServerlessFunction']

@pulumi.input_type
class ServerlessFunctionArgs:
    def __init__(__self__, *,
                 entry: pulumi.Input[str],
                 handler: pulumi.Input[str],
                 name: pulumi.Input[str],
                 path: pulumi.Input[pulumi.Archive],
                 project: pulumi.Input['_domain.ProjectArgs'],
                 backend_path: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServerlessFunction resource.
        :param pulumi.Input[str] entry: The entry file of the function. E.G. "index.mjs"
        :param pulumi.Input[str] handler: The exported handler's name. E.G. "handler"
        :param pulumi.Input[str] name: The name of the function - this is used as an human readable tag in the dashboard. E.G. "my-hello-world-function"
        :param pulumi.Input[pulumi.Archive] path: The path to the function's code. This is relative to the backend path.
        :param pulumi.Input['_domain.ProjectArgs'] project: The project to which the function will be deployed.
        :param pulumi.Input[str] backend_path: The path where the backend code is located. This is the root directory for all the backend resources (functions, classes, other packages).
        :param pulumi.Input[str] language: The language in which the function is written.
               
               	Supported languages are:
               	- js
        """
        pulumi.set(__self__, "entry", entry)
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project", project)
        if backend_path is not None:
            pulumi.set(__self__, "backend_path", backend_path)
        if language is None:
            language = 'js'
        if language is not None:
            pulumi.set(__self__, "language", language)

    @property
    @pulumi.getter
    def entry(self) -> pulumi.Input[str]:
        """
        The entry file of the function. E.G. "index.mjs"
        """
        return pulumi.get(self, "entry")

    @entry.setter
    def entry(self, value: pulumi.Input[str]):
        pulumi.set(self, "entry", value)

    @property
    @pulumi.getter
    def handler(self) -> pulumi.Input[str]:
        """
        The exported handler's name. E.G. "handler"
        """
        return pulumi.get(self, "handler")

    @handler.setter
    def handler(self, value: pulumi.Input[str]):
        pulumi.set(self, "handler", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the function - this is used as an human readable tag in the dashboard. E.G. "my-hello-world-function"
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[pulumi.Archive]:
        """
        The path to the function's code. This is relative to the backend path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[pulumi.Archive]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input['_domain.ProjectArgs']:
        """
        The project to which the function will be deployed.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input['_domain.ProjectArgs']):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="backendPath")
    def backend_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path where the backend code is located. This is the root directory for all the backend resources (functions, classes, other packages).
        """
        return pulumi.get(self, "backend_path")

    @backend_path.setter
    def backend_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_path", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        The language in which the function is written.

        	Supported languages are:
        	- js
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)


class ServerlessFunction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_path: Optional[pulumi.Input[str]] = None,
                 entry: Optional[pulumi.Input[str]] = None,
                 handler: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[pulumi.Archive]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['_domain.ProjectArgs']]] = None,
                 __props__=None):
        """
        A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.

        The project resource will deploy an empty project on the Genezio platform.

        It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.

        ## Example Usage

        ### Basic Usage

        ### Environment Variables

        ## Pulumi Output Reference

        Once the project is created, the `projectId` and `projectUrl` are available as outputs.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backend_path: The path where the backend code is located. This is the root directory for all the backend resources (functions, classes, other packages).
        :param pulumi.Input[str] entry: The entry file of the function. E.G. "index.mjs"
        :param pulumi.Input[str] handler: The exported handler's name. E.G. "handler"
        :param pulumi.Input[str] language: The language in which the function is written.
               
               	Supported languages are:
               	- js
        :param pulumi.Input[str] name: The name of the function - this is used as an human readable tag in the dashboard. E.G. "my-hello-world-function"
        :param pulumi.Input[pulumi.Archive] path: The path to the function's code. This is relative to the backend path.
        :param pulumi.Input[pulumi.InputType['_domain.ProjectArgs']] project: The project to which the function will be deployed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerlessFunctionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.

        The project resource will deploy an empty project on the Genezio platform.

        It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.

        ## Example Usage

        ### Basic Usage

        ### Environment Variables

        ## Pulumi Output Reference

        Once the project is created, the `projectId` and `projectUrl` are available as outputs.

        :param str resource_name: The name of the resource.
        :param ServerlessFunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerlessFunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_path: Optional[pulumi.Input[str]] = None,
                 entry: Optional[pulumi.Input[str]] = None,
                 handler: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[pulumi.Archive]] = None,
                 project: Optional[pulumi.Input[pulumi.InputType['_domain.ProjectArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerlessFunctionArgs.__new__(ServerlessFunctionArgs)

            __props__.__dict__["backend_path"] = backend_path
            if entry is None and not opts.urn:
                raise TypeError("Missing required property 'entry'")
            __props__.__dict__["entry"] = entry
            if handler is None and not opts.urn:
                raise TypeError("Missing required property 'handler'")
            __props__.__dict__["handler"] = handler
            if language is None:
                language = 'js'
            __props__.__dict__["language"] = language
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["function_id"] = None
            __props__.__dict__["url"] = None
        super(ServerlessFunction, __self__).__init__(
            'genezio:index:ServerlessFunction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ServerlessFunction':
        """
        Get an existing ServerlessFunction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServerlessFunctionArgs.__new__(ServerlessFunctionArgs)

        __props__.__dict__["backend_path"] = None
        __props__.__dict__["entry"] = None
        __props__.__dict__["function_id"] = None
        __props__.__dict__["handler"] = None
        __props__.__dict__["language"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["path"] = None
        __props__.__dict__["project"] = None
        __props__.__dict__["url"] = None
        return ServerlessFunction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backendPath")
    def backend_path(self) -> pulumi.Output[Optional[str]]:
        """
        The path where the backend code is located. This is the root directory for all the backend resources (functions, classes, other packages).
        """
        return pulumi.get(self, "backend_path")

    @property
    @pulumi.getter
    def entry(self) -> pulumi.Output[str]:
        """
        The entry file of the function. E.G. "index.mjs"
        """
        return pulumi.get(self, "entry")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[str]:
        """
        The function ID.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def handler(self) -> pulumi.Output[str]:
        """
        The exported handler's name. E.G. "handler"
        """
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def language(self) -> pulumi.Output[Optional[str]]:
        """
        The language in which the function is written.

        	Supported languages are:
        	- js
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the function - this is used as an human readable tag in the dashboard. E.G. "my-hello-world-function"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[pulumi.Archive]:
        """
        The path to the function's code. This is relative to the backend path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output['_domain.outputs.Project']:
        """
        The project to which the function will be deployed.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the function.
        """
        return pulumi.get(self, "url")

