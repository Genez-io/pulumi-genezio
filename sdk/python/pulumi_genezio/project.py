# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import domain as _domain

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Sequence[pulumi.Input['_domain.EnvironmentVariableArgs']]]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input[str] name: The name of the project to be deployed.
        :param pulumi.Input[str] region: The region in which the project will be deployed.
               
               	Supported regions are:
               	- us-east-1
               	- eu-central-1
               	
        :param pulumi.Input[str] cloud_provider: The cloud provider on which the project will be deployed.
               
               	Supported cloud providers are:
               	- genezio-cloud
        :param pulumi.Input[Sequence[pulumi.Input['_domain.EnvironmentVariableArgs']]] environment: The backend environment variables that will be securely stored for the project.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if cloud_provider is None:
            cloud_provider = 'genezio-cloud'
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the project to be deployed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The region in which the project will be deployed.

        	Supported regions are:
        	- us-east-1
        	- eu-central-1
        	
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud provider on which the project will be deployed.

        	Supported cloud providers are:
        	- genezio-cloud
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_domain.EnvironmentVariableArgs']]]]:
        """
        The backend environment variables that will be securely stored for the project.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_domain.EnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment", value)


class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_domain.EnvironmentVariableArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.

        The project resource will deploy an empty project on the Genezio platform.

        It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.

        ## Example Usage

        ### Basic Usage

        ### Environment Variables

        ## Pulumi Output Reference

        Once the project is created, the `projectId` and `projectUrl` are available as outputs.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: The cloud provider on which the project will be deployed.
               
               	Supported cloud providers are:
               	- genezio-cloud
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_domain.EnvironmentVariableArgs']]]] environment: The backend environment variables that will be securely stored for the project.
        :param pulumi.Input[str] name: The name of the project to be deployed.
        :param pulumi.Input[str] region: The region in which the project will be deployed.
               
               	Supported regions are:
               	- us-east-1
               	- eu-central-1
               	
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.

        The project resource will deploy an empty project on the Genezio platform.

        It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.

        ## Example Usage

        ### Basic Usage

        ### Environment Variables

        ## Pulumi Output Reference

        Once the project is created, the `projectId` and `projectUrl` are available as outputs.

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_domain.EnvironmentVariableArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            if cloud_provider is None:
                cloud_provider = 'genezio-cloud'
            __props__.__dict__["cloud_provider"] = cloud_provider
            __props__.__dict__["environment"] = environment
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["project_env_id"] = None
            __props__.__dict__["project_id"] = None
        super(Project, __self__).__init__(
            'genezio:index:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ProjectArgs.__new__(ProjectArgs)

        __props__.__dict__["cloud_provider"] = None
        __props__.__dict__["environment"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["project_env_id"] = None
        __props__.__dict__["project_id"] = None
        __props__.__dict__["region"] = None
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[Optional[str]]:
        """
        The cloud provider on which the project will be deployed.

        	Supported cloud providers are:
        	- genezio-cloud
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[Optional[Sequence['_domain.outputs.EnvironmentVariable']]]:
        """
        The backend environment variables that will be securely stored for the project.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the project to be deployed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectEnvId")
    def project_env_id(self) -> pulumi.Output[str]:
        """
        The environment ID.
        """
        return pulumi.get(self, "project_env_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region in which the project will be deployed.

        	Supported regions are:
        	- us-east-1
        	- eu-central-1
        	
        """
        return pulumi.get(self, "region")

