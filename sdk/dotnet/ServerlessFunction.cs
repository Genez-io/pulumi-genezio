// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Genezio
{
    /// <summary>
    /// A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.
    /// 
    /// The project resource will deploy an empty project on the Genezio platform.
    /// 
    /// It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ### Environment Variables
    /// 
    /// ## Pulumi Output Reference
    /// 
    /// Once the project is created, the `projectId` and `projectUrl` are available as outputs.
    /// </summary>
    [GenezioResourceType("genezio:index:ServerlessFunction")]
    public partial class ServerlessFunction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The path where the backend code is located. This is the root directory for all the backend resources (functions, classes, other packages).
        /// </summary>
        [Output("backendPath")]
        public Output<string?> BackendPath { get; private set; } = null!;

        /// <summary>
        /// The entry file of the function. E.G. "index.mjs"
        /// </summary>
        [Output("entry")]
        public Output<string> Entry { get; private set; } = null!;

        /// <summary>
        /// The function ID.
        /// </summary>
        [Output("functionId")]
        public Output<string> FunctionId { get; private set; } = null!;

        /// <summary>
        /// The exported handler's name. E.G. "handler"
        /// </summary>
        [Output("handler")]
        public Output<string> Handler { get; private set; } = null!;

        /// <summary>
        /// The language in which the function is written.
        /// 
        /// 	Supported languages are:
        /// 	- js
        /// </summary>
        [Output("language")]
        public Output<string?> Language { get; private set; } = null!;

        /// <summary>
        /// The name of the function - this is used as an human readable tag in the dashboard. E.G. "my-hello-world-function"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The path to the function's code. This is relative to the backend path.
        /// </summary>
        [Output("path")]
        public Output<Archive> Path { get; private set; } = null!;

        /// <summary>
        /// The project to which the function will be deployed.
        /// </summary>
        [Output("project")]
        public Output<Pulumi.Genezio.Domain.Outputs.Project> Project { get; private set; } = null!;

        /// <summary>
        /// The URL of the function.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a ServerlessFunction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerlessFunction(string name, ServerlessFunctionArgs args, CustomResourceOptions? options = null)
            : base("genezio:index:ServerlessFunction", name, args ?? new ServerlessFunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerlessFunction(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("genezio:index:ServerlessFunction", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerlessFunction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerlessFunction Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new ServerlessFunction(name, id, options);
        }
    }

    public sealed class ServerlessFunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path where the backend code is located. This is the root directory for all the backend resources (functions, classes, other packages).
        /// </summary>
        [Input("backendPath")]
        public Input<string>? BackendPath { get; set; }

        /// <summary>
        /// The entry file of the function. E.G. "index.mjs"
        /// </summary>
        [Input("entry", required: true)]
        public Input<string> Entry { get; set; } = null!;

        /// <summary>
        /// The exported handler's name. E.G. "handler"
        /// </summary>
        [Input("handler", required: true)]
        public Input<string> Handler { get; set; } = null!;

        /// <summary>
        /// The language in which the function is written.
        /// 
        /// 	Supported languages are:
        /// 	- js
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// The name of the function - this is used as an human readable tag in the dashboard. E.G. "my-hello-world-function"
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to the function's code. This is relative to the backend path.
        /// </summary>
        [Input("path", required: true)]
        public Input<Archive> Path { get; set; } = null!;

        /// <summary>
        /// The project to which the function will be deployed.
        /// </summary>
        [Input("project", required: true)]
        public Input<Pulumi.Genezio.Domain.Inputs.ProjectArgs> Project { get; set; } = null!;

        public ServerlessFunctionArgs()
        {
            Language = "js";
        }
        public static new ServerlessFunctionArgs Empty => new ServerlessFunctionArgs();
    }
}
