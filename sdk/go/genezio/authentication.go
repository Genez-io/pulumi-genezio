// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package genezio

import (
	"context"
	"reflect"

	"domain"
	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

// A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.
//
// The project resource will deploy an empty project on the Genezio platform.
//
// It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.
//
// ## Example Usage
//
// ### Basic Usage
//
// ### Environment Variables
//
// ## Pulumi Output Reference
//
// Once the project is created, the `projectId` and `projectUrl` are available as outputs.
type Authentication struct {
	pulumi.CustomResourceState

	// The type of database to be used for authentication.
	//
	//     Supported database types are:
	//     - postgresql
	//     - mongodb
	DatabaseType pulumi.StringPtrOutput `pulumi:"databaseType"`
	// The URL of the database to be used for authentication.
	DatabaseUrl pulumi.StringOutput `pulumi:"databaseUrl"`
	// The project to which the authentication will be added.
	Project domain.ProjectOutput `pulumi:"project"`
	// The authentication providers to be enabled for the project.
	//
	//     You can enable the following providers:
	//     - email
	//     - web3
	//     - google
	Provider domain.AuthenticationProvidersPtrOutput `pulumi:"provider"`
	// The region in which the authentication is deployed.
	Region pulumi.StringOutput `pulumi:"region"`
	// The token for the authentication. This token is used on the client side.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewAuthentication registers a new resource with the given unique name, arguments, and options.
func NewAuthentication(ctx *pulumi.Context,
	name string, args *AuthenticationArgs, opts ...pulumi.ResourceOption) (*Authentication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseUrl == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseUrl'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.DatabaseType == nil {
		args.DatabaseType = pulumi.StringPtr("postgresql")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authentication
	err := ctx.RegisterResource("genezio:index:Authentication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthentication gets an existing Authentication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthentication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticationState, opts ...pulumi.ResourceOption) (*Authentication, error) {
	var resource Authentication
	err := ctx.ReadResource("genezio:index:Authentication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authentication resources.
type authenticationState struct {
}

type AuthenticationState struct {
}

func (AuthenticationState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationState)(nil)).Elem()
}

type authenticationArgs struct {
	// The type of database to be used for authentication.
	//
	//     Supported database types are:
	//     - postgresql
	//     - mongodb
	DatabaseType *string `pulumi:"databaseType"`
	// The URL of the database to be used for authentication.
	DatabaseUrl string `pulumi:"databaseUrl"`
	// The project to which the authentication will be added.
	Project domain.Project `pulumi:"project"`
	// The authentication providers to be enabled for the project.
	//
	//     You can enable the following providers:
	//     - email
	//     - web3
	//     - google
	Provider *domain.AuthenticationProviders `pulumi:"provider"`
}

// The set of arguments for constructing a Authentication resource.
type AuthenticationArgs struct {
	// The type of database to be used for authentication.
	//
	//     Supported database types are:
	//     - postgresql
	//     - mongodb
	DatabaseType pulumi.StringPtrInput
	// The URL of the database to be used for authentication.
	DatabaseUrl pulumi.StringInput
	// The project to which the authentication will be added.
	Project domain.ProjectInput
	// The authentication providers to be enabled for the project.
	//
	//     You can enable the following providers:
	//     - email
	//     - web3
	//     - google
	Provider domain.AuthenticationProvidersPtrInput
}

func (AuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationArgs)(nil)).Elem()
}

type AuthenticationInput interface {
	pulumi.Input

	ToAuthenticationOutput() AuthenticationOutput
	ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput
}

func (*Authentication) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (i *Authentication) ToAuthenticationOutput() AuthenticationOutput {
	return i.ToAuthenticationOutputWithContext(context.Background())
}

func (i *Authentication) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationOutput)
}

type AuthenticationOutput struct{ *pulumi.OutputState }

func (AuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (o AuthenticationOutput) ToAuthenticationOutput() AuthenticationOutput {
	return o
}

func (o AuthenticationOutput) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return o
}

// The type of database to be used for authentication.
//
//	Supported database types are:
//	- postgresql
//	- mongodb
func (o AuthenticationOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authentication) pulumi.StringPtrOutput { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// The URL of the database to be used for authentication.
func (o AuthenticationOutput) DatabaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Authentication) pulumi.StringOutput { return v.DatabaseUrl }).(pulumi.StringOutput)
}

// The project to which the authentication will be added.
func (o AuthenticationOutput) Project() domain.ProjectOutput {
	return o.ApplyT(func(v *Authentication) domain.ProjectOutput { return v.Project }).(domain.ProjectOutput)
}

// The authentication providers to be enabled for the project.
//
//	You can enable the following providers:
//	- email
//	- web3
//	- google
func (o AuthenticationOutput) Provider() domain.AuthenticationProvidersPtrOutput {
	return o.ApplyT(func(v *Authentication) domain.AuthenticationProvidersPtrOutput { return v.Provider }).(domain.AuthenticationProvidersPtrOutput)
}

// The region in which the authentication is deployed.
func (o AuthenticationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Authentication) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The token for the authentication. This token is used on the client side.
func (o AuthenticationOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *Authentication) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticationInput)(nil)).Elem(), &Authentication{})
	pulumi.RegisterOutputType(AuthenticationOutput{})
}
