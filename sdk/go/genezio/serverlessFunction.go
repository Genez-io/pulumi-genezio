// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package genezio

import (
	"context"
	"reflect"

	"domain"
	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

type ServerlessFunction struct {
	pulumi.CustomResourceState

	AuthToken            pulumi.StringOutput                   `pulumi:"authToken"`
	Entry                pulumi.StringOutput                   `pulumi:"entry"`
	EnvironmentVariables domain.EnvironmentVariableArrayOutput `pulumi:"environmentVariables"`
	FolderHash           pulumi.StringPtrOutput                `pulumi:"folderHash"`
	FunctionId           pulumi.StringOutput                   `pulumi:"functionId"`
	Handler              pulumi.StringOutput                   `pulumi:"handler"`
	Name                 pulumi.StringOutput                   `pulumi:"name"`
	Path                 pulumi.StringOutput                   `pulumi:"path"`
	ProjectEnvId         pulumi.StringOutput                   `pulumi:"projectEnvId"`
	ProjectId            pulumi.StringOutput                   `pulumi:"projectId"`
	ProjectName          pulumi.StringOutput                   `pulumi:"projectName"`
	Region               pulumi.StringOutput                   `pulumi:"region"`
	Url                  pulumi.StringOutput                   `pulumi:"url"`
}

// NewServerlessFunction registers a new resource with the given unique name, arguments, and options.
func NewServerlessFunction(ctx *pulumi.Context,
	name string, args *ServerlessFunctionArgs, opts ...pulumi.ResourceOption) (*ServerlessFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthToken == nil {
		return nil, errors.New("invalid value for required argument 'AuthToken'")
	}
	if args.Entry == nil {
		return nil, errors.New("invalid value for required argument 'Entry'")
	}
	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessFunction
	err := ctx.RegisterResource("genezio:index:ServerlessFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessFunction gets an existing ServerlessFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessFunctionState, opts ...pulumi.ResourceOption) (*ServerlessFunction, error) {
	var resource ServerlessFunction
	err := ctx.ReadResource("genezio:index:ServerlessFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessFunction resources.
type serverlessFunctionState struct {
}

type ServerlessFunctionState struct {
}

func (ServerlessFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessFunctionState)(nil)).Elem()
}

type serverlessFunctionArgs struct {
	AuthToken            string                       `pulumi:"authToken"`
	Entry                string                       `pulumi:"entry"`
	EnvironmentVariables []domain.EnvironmentVariable `pulumi:"environmentVariables"`
	FolderHash           *string                      `pulumi:"folderHash"`
	Handler              string                       `pulumi:"handler"`
	Name                 string                       `pulumi:"name"`
	Path                 string                       `pulumi:"path"`
	ProjectName          string                       `pulumi:"projectName"`
	Region               string                       `pulumi:"region"`
}

// The set of arguments for constructing a ServerlessFunction resource.
type ServerlessFunctionArgs struct {
	AuthToken            pulumi.StringInput
	Entry                pulumi.StringInput
	EnvironmentVariables domain.EnvironmentVariableArrayInput
	FolderHash           pulumi.StringPtrInput
	Handler              pulumi.StringInput
	Name                 pulumi.StringInput
	Path                 pulumi.StringInput
	ProjectName          pulumi.StringInput
	Region               pulumi.StringInput
}

func (ServerlessFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessFunctionArgs)(nil)).Elem()
}

type ServerlessFunctionInput interface {
	pulumi.Input

	ToServerlessFunctionOutput() ServerlessFunctionOutput
	ToServerlessFunctionOutputWithContext(ctx context.Context) ServerlessFunctionOutput
}

func (*ServerlessFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessFunction)(nil)).Elem()
}

func (i *ServerlessFunction) ToServerlessFunctionOutput() ServerlessFunctionOutput {
	return i.ToServerlessFunctionOutputWithContext(context.Background())
}

func (i *ServerlessFunction) ToServerlessFunctionOutputWithContext(ctx context.Context) ServerlessFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessFunctionOutput)
}

type ServerlessFunctionOutput struct{ *pulumi.OutputState }

func (ServerlessFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessFunction)(nil)).Elem()
}

func (o ServerlessFunctionOutput) ToServerlessFunctionOutput() ServerlessFunctionOutput {
	return o
}

func (o ServerlessFunctionOutput) ToServerlessFunctionOutputWithContext(ctx context.Context) ServerlessFunctionOutput {
	return o
}

func (o ServerlessFunctionOutput) AuthToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.AuthToken }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Entry }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) EnvironmentVariables() domain.EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *ServerlessFunction) domain.EnvironmentVariableArrayOutput { return v.EnvironmentVariables }).(domain.EnvironmentVariableArrayOutput)
}

func (o ServerlessFunctionOutput) FolderHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringPtrOutput { return v.FolderHash }).(pulumi.StringPtrOutput)
}

func (o ServerlessFunctionOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) ProjectEnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.ProjectEnvId }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ServerlessFunctionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessFunctionInput)(nil)).Elem(), &ServerlessFunction{})
	pulumi.RegisterOutputType(ServerlessFunctionOutput{})
}
