// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package genezio

import (
	"context"
	"reflect"

	"domain"
	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

// A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.
//
// The project resource will deploy an empty project on the Genezio platform.
//
// It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.
//
// ## Example Usage
//
// ### Basic Usage
//
// ### Environment Variables
//
// ## Pulumi Output Reference
//
// Once the project is created, the `projectId` and `projectUrl` are available as outputs.
type ServerlessFunction struct {
	pulumi.CustomResourceState

	// The path to the backend folder where the function is located.
	BackendPath pulumi.StringPtrOutput `pulumi:"backendPath"`
	// The entry file of the function.
	Entry pulumi.StringOutput `pulumi:"entry"`
	// The function ID.
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// The handler of the function.
	Handler pulumi.StringOutput `pulumi:"handler"`
	// The language in which the function is written.
	Language pulumi.StringPtrOutput `pulumi:"language"`
	// The name of the function to be deployed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The path to the function code.
	Path pulumi.ArchiveOutput `pulumi:"path"`
	// The project to which the function will be deployed.
	Project domain.ProjectOutput `pulumi:"project"`
	// The URL of the function.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewServerlessFunction registers a new resource with the given unique name, arguments, and options.
func NewServerlessFunction(ctx *pulumi.Context,
	name string, args *ServerlessFunctionArgs, opts ...pulumi.ResourceOption) (*ServerlessFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entry == nil {
		return nil, errors.New("invalid value for required argument 'Entry'")
	}
	if args.Handler == nil {
		return nil, errors.New("invalid value for required argument 'Handler'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Language == nil {
		args.Language = pulumi.StringPtr("js")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerlessFunction
	err := ctx.RegisterResource("genezio:index:ServerlessFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerlessFunction gets an existing ServerlessFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerlessFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerlessFunctionState, opts ...pulumi.ResourceOption) (*ServerlessFunction, error) {
	var resource ServerlessFunction
	err := ctx.ReadResource("genezio:index:ServerlessFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerlessFunction resources.
type serverlessFunctionState struct {
}

type ServerlessFunctionState struct {
}

func (ServerlessFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessFunctionState)(nil)).Elem()
}

type serverlessFunctionArgs struct {
	// The path to the backend folder where the function is located.
	BackendPath *string `pulumi:"backendPath"`
	// The entry file of the function.
	Entry string `pulumi:"entry"`
	// The handler of the function.
	Handler string `pulumi:"handler"`
	// The language in which the function is written.
	Language *string `pulumi:"language"`
	// The name of the function to be deployed.
	Name string `pulumi:"name"`
	// The path to the function code.
	Path pulumi.Archive `pulumi:"path"`
	// The project to which the function will be deployed.
	Project domain.Project `pulumi:"project"`
}

// The set of arguments for constructing a ServerlessFunction resource.
type ServerlessFunctionArgs struct {
	// The path to the backend folder where the function is located.
	BackendPath pulumi.StringPtrInput
	// The entry file of the function.
	Entry pulumi.StringInput
	// The handler of the function.
	Handler pulumi.StringInput
	// The language in which the function is written.
	Language pulumi.StringPtrInput
	// The name of the function to be deployed.
	Name pulumi.StringInput
	// The path to the function code.
	Path pulumi.ArchiveInput
	// The project to which the function will be deployed.
	Project domain.ProjectInput
}

func (ServerlessFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverlessFunctionArgs)(nil)).Elem()
}

type ServerlessFunctionInput interface {
	pulumi.Input

	ToServerlessFunctionOutput() ServerlessFunctionOutput
	ToServerlessFunctionOutputWithContext(ctx context.Context) ServerlessFunctionOutput
}

func (*ServerlessFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessFunction)(nil)).Elem()
}

func (i *ServerlessFunction) ToServerlessFunctionOutput() ServerlessFunctionOutput {
	return i.ToServerlessFunctionOutputWithContext(context.Background())
}

func (i *ServerlessFunction) ToServerlessFunctionOutputWithContext(ctx context.Context) ServerlessFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessFunctionOutput)
}

type ServerlessFunctionOutput struct{ *pulumi.OutputState }

func (ServerlessFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessFunction)(nil)).Elem()
}

func (o ServerlessFunctionOutput) ToServerlessFunctionOutput() ServerlessFunctionOutput {
	return o
}

func (o ServerlessFunctionOutput) ToServerlessFunctionOutputWithContext(ctx context.Context) ServerlessFunctionOutput {
	return o
}

// The path to the backend folder where the function is located.
func (o ServerlessFunctionOutput) BackendPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringPtrOutput { return v.BackendPath }).(pulumi.StringPtrOutput)
}

// The entry file of the function.
func (o ServerlessFunctionOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Entry }).(pulumi.StringOutput)
}

// The function ID.
func (o ServerlessFunctionOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// The handler of the function.
func (o ServerlessFunctionOutput) Handler() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Handler }).(pulumi.StringOutput)
}

// The language in which the function is written.
func (o ServerlessFunctionOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

// The name of the function to be deployed.
func (o ServerlessFunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path to the function code.
func (o ServerlessFunctionOutput) Path() pulumi.ArchiveOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.ArchiveOutput { return v.Path }).(pulumi.ArchiveOutput)
}

// The project to which the function will be deployed.
func (o ServerlessFunctionOutput) Project() domain.ProjectOutput {
	return o.ApplyT(func(v *ServerlessFunction) domain.ProjectOutput { return v.Project }).(domain.ProjectOutput)
}

// The URL of the function.
func (o ServerlessFunctionOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerlessFunction) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerlessFunctionInput)(nil)).Elem(), &ServerlessFunction{})
	pulumi.RegisterOutputType(ServerlessFunctionOutput{})
}
