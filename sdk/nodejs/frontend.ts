// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.
 *
 * The project resource will deploy an empty project on the Genezio platform.
 *
 * It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as genezio from "@pulumi/genezio";
 *
 * const project = new genezio.Project("project", {
 *   name: "my-project",
 *   region: "us-east-1",
 * });
 * ```
 *
 * ### Environment Variables
 *
 * ```typescript
 * import * as genezio from "@pulumi/genezio";
 *
 * const project = new genezio.Project("MyProject", {
 *   name: "my-project",
 *   region: "us-east-1",
 *   environmentVariables: [
 *     {
 *       name: "MY_ENV_VAR",
 *       value: "my-value",
 *     },
 *   ],
 * });
 * ```
 *
 * ## Pulumi Output Reference
 *
 * Once the project is created, the `projectId` and `projectUrl` are available as outputs.
 *
 * ```typescript
 *
 * const project = new genezio.Project("MyProject", {
 *   name: "my-project",
 *   region: "us-east-1",
 * });
 *
 * export const projectId = project.projectId;
 * export const projectUrl = project.projectUrl;
 * ```
 */
export class Frontend extends pulumi.CustomResource {
    /**
     * Get an existing Frontend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Frontend {
        return new Frontend(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genezio:index:Frontend';

    /**
     * Returns true if the given object is an instance of Frontend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Frontend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Frontend.__pulumiType;
    }

    /**
     * The commands to run before deploying the frontend.
     */
    public readonly buildCommands!: pulumi.Output<string[] | undefined>;
    /**
     * The environment variables that will be set for the frontend.
     */
    public readonly environment!: pulumi.Output<outputs.domain.EnvironmentVariable[] | undefined>;
    /**
     * The path to the frontend files.
     */
    public readonly path!: pulumi.Output<pulumi.asset.Archive>;
    /**
     * The project to which the frontend will be deployed.
     */
    public readonly project!: pulumi.Output<outputs.domain.Project>;
    /**
     * The folder in the path that contains the files to be published.
     */
    public readonly publish!: pulumi.Output<string>;
    /**
     * The subdomain of the frontend.
     */
    public readonly subdomain!: pulumi.Output<string | undefined>;
    /**
     * The URL of the frontend.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Frontend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontendArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.publish === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publish'");
            }
            resourceInputs["buildCommands"] = args ? args.buildCommands : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["publish"] = args ? args.publish : undefined;
            resourceInputs["subdomain"] = args ? args.subdomain : undefined;
            resourceInputs["url"] = undefined /*out*/;
        } else {
            resourceInputs["buildCommands"] = undefined /*out*/;
            resourceInputs["environment"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["publish"] = undefined /*out*/;
            resourceInputs["subdomain"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Frontend.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Frontend resource.
 */
export interface FrontendArgs {
    /**
     * The commands to run before deploying the frontend.
     */
    buildCommands?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The environment variables that will be set for the frontend.
     */
    environment?: pulumi.Input<pulumi.Input<inputs.domain.EnvironmentVariableArgs>[]>;
    /**
     * The path to the frontend files.
     */
    path: pulumi.Input<pulumi.asset.Archive>;
    /**
     * The project to which the frontend will be deployed.
     */
    project: pulumi.Input<inputs.domain.ProjectArgs>;
    /**
     * The folder in the path that contains the files to be published.
     */
    publish: pulumi.Input<string>;
    /**
     * The subdomain of the frontend.
     */
    subdomain?: pulumi.Input<string>;
}
