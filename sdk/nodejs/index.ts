// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatabaseArgs } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerlessFunctionArgs } from "./serverlessFunction";
export type ServerlessFunction = import("./serverlessFunction").ServerlessFunction;
export const ServerlessFunction: typeof import("./serverlessFunction").ServerlessFunction = null as any;
utilities.lazyLoad(exports, ["ServerlessFunction"], () => require("./serverlessFunction"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "genezio:index:Database":
                return new Database(name, <any>undefined, { urn })
            case "genezio:index:ServerlessFunction":
                return new ServerlessFunction(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("genezio", "index", _module)
pulumi.runtime.registerResourcePackage("genezio", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:genezio") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
