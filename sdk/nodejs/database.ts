// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A project resource that will be deployed on the Genezio platform.The project resource is used to group resources together and manage them as a single unit.
 *
 * The project resource will deploy an empty project on the Genezio platform.
 *
 * It is recommended to create a Project Resource as the first step in your deployment workflow. The output from this resource can then be utilized to provision and configure other resources within the project, ensuring they are properly associated and managed under a unified project.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as genezio from "@pulumi/genezio";
 *
 * const project = new genezio.Project("project", {
 *   name: "my-project",
 *   region: "us-east-1",
 * });
 * ```
 *
 * ### Environment Variables
 *
 * ```typescript
 * import * as genezio from "@pulumi/genezio";
 *
 * const project = new genezio.Project("MyProject", {
 *   name: "my-project",
 *   region: "us-east-1",
 *   environmentVariables: [
 *     {
 *       name: "MY_ENV_VAR",
 *       value: "my-value",
 *     },
 *   ],
 * });
 * ```
 *
 * ## Pulumi Output Reference
 *
 * Once the project is created, the `projectId` and `projectUrl` are available as outputs.
 *
 * ```typescript
 *
 * const project = new genezio.Project("MyProject", {
 *   name: "my-project",
 *   region: "us-east-1",
 * });
 *
 * export const projectId = project.projectId;
 * export const projectUrl = project.projectUrl;
 * ```
 */
export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'genezio:index:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * The database ID.
     */
    public /*out*/ readonly databaseId!: pulumi.Output<string>;
    /**
     * The name of the database to be deployed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A database can be used in a project by linking it.
     * 	Linking the database will expose a connection URL as an environment variable for convenience.
     * 	The same database can be linked to multiple projects.
     */
    public readonly project!: pulumi.Output<outputs.domain.Project | undefined>;
    /**
     * The region in which the database will be deployed.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The type of the database to be deployed.
     *
     * 	Supported types are:
     * 	- postgres-neon
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The URL of the database.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["region"] = (args ? args.region : undefined) ?? "us-east-1";
            resourceInputs["type"] = (args ? args.type : undefined) ?? "postgres-neon";
            resourceInputs["databaseId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        } else {
            resourceInputs["databaseId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["url"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * The name of the database to be deployed.
     */
    name: pulumi.Input<string>;
    /**
     * A database can be used in a project by linking it.
     * 	Linking the database will expose a connection URL as an environment variable for convenience.
     * 	The same database can be linked to multiple projects.
     */
    project?: pulumi.Input<inputs.domain.ProjectArgs>;
    /**
     * The region in which the database will be deployed.
     */
    region?: pulumi.Input<string>;
    /**
     * The type of the database to be deployed.
     *
     * 	Supported types are:
     * 	- postgres-neon
     */
    type?: pulumi.Input<string>;
}
